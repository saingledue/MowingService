/*
Deployment script for MowingServiceDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MowingServiceDB"
:setvar DefaultFilePrefix "MowingServiceDB"
:setvar DefaultDataPath "C:\Users\saing\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\saing\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[spBusiness_InsertBusiness]...';


GO
CREATE PROCEDURE [dbo].[spBusiness_InsertBusiness]
	@Location VARCHAR(50),
	@OpenHours INT,
	@CloseHours INT,
	@BusinessId INT output

AS

BEGIN

	SET NOCOUNT ON;

	INSERT INTO dbo.[Business]([Location], [OpenHours], [CloseHours])
	VALUES (@Location, @OpenHours, @CloseHours);

	SET @BusinessId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[spBusiness_UpdateBusiness]...';


GO
CREATE PROCEDURE [dbo].[spBusiness_UpdateBusiness]
	@BusinessId INT,
	@Location VARCHAR(50),
	@OpenHours INT,
	@CloseHours INT

AS

BEGIN

	SET NOCOUNT ON;

	UPDATE dbo.[Business]
		SET [Location] = @Location,
			[OpenHours] = @OpenHours,
			[CloseHours] = @CloseHours
		WHERE [BusinessId] = @BusinessId

END
GO
PRINT N'Creating [dbo].[spEmployee_DeleteByEmployeeId]...';


GO
CREATE PROCEDURE [dbo].[spEmployee_DeleteByEmployeeId]
	@EmployeeId int

AS
	
BEGIN
	
	SET NOCOUNT ON;

	DELETE
	FROM dbo.[Employee]
	WHERE EmployeeId = @EmployeeId;

END
GO
PRINT N'Creating [dbo].[spEmployee_GetEmployeeAll]...';


GO
CREATE PROCEDURE [dbo].[spEmployee_GetEmployeeAll]

AS
	
BEGIN

	SET NOCOUNT ON;

	SELECT [EmployeeId], [FirstName], [LastName], [BusinessId], [Age] 
	FROM [Employee]

END
GO
PRINT N'Creating [dbo].[spEmployee_GetEmployeeByEmployeeId]...';


GO
CREATE PROCEDURE [dbo].[spEmployee_GetEmployeeByEmployeeId]
	@EmployeeId int

AS
	
BEGIN

	SET NOCOUNT ON;

	SELECT [EmployeeId], [FirstName], [LastName], [BusinessId], [Age]
	FROM dbo.[Employee]
	WHERE EmployeeId = @EmployeeId

END
GO
PRINT N'Creating [dbo].[spEmployee_InsertEmployee]...';


GO
CREATE PROCEDURE [dbo].[spEmployee_InsertEmployee]
	@FirstName VARCHAR (25),
	@LastName VARCHAR(50),
	@Age INT,
	@BusinessId INT,
	@EmployeeId INT output

AS

BEGIN

	SET NOCOUNT ON;

	INSERT INTO dbo.[Employee]([FirstName], [LastName], [Age], [BusinessId])
	VALUES (@FirstName, @LastName, @Age, @BusinessId);

	SET @EmployeeId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[spEmployee_UpdateEmployee]...';


GO
CREATE PROCEDURE [dbo].[spEmployee_UpdateEmployee]
	@EmployeeId INT,
	@FirstName VARCHAR (25),
	@LastName VARCHAR(50),
	@BusinessId INT,
	@Age INT

AS

BEGIN

	SET NOCOUNT ON;

	UPDATE dbo.[Employee]
		SET [FirstName] = @FirstName,
			[LastName] = @LastName,
			[BusinessId] = @BusinessId,
			[Age] = @Age
		WHERE [EmployeeId] = @EmployeeId

END
GO
PRINT N'Creating [dbo].[spPortfolio_DeleteByPortfolioId]...';


GO
CREATE PROCEDURE [dbo].[spPortfolio_DeleteByPortfolioId]
	@PortfolioId int

AS
	
BEGIN
	
	SET NOCOUNT ON;

	DELETE
	FROM dbo.[Portfolio]
	WHERE PortfolioId = @PortfolioId;

END
GO
PRINT N'Creating [dbo].[spPortfolio_GetPortfolioAll]...';


GO
CREATE PROCEDURE [dbo].[spPortfolio_GetPortfolioAll]

AS
	
BEGIN

	SET NOCOUNT ON;

	SELECT [PortfolioId], [EmployeeId], [WorkPic] 
	FROM [Portfolio]

END
GO
PRINT N'Creating [dbo].[spPortfolio_GetPortfolioByPortfolioId]...';


GO
CREATE PROCEDURE [dbo].[spPortfolio_GetPortfolioByPortfolioId]
	@PortfolioId int

AS
	
BEGIN

	SET NOCOUNT ON;

	SELECT [PortfolioId], [EmployeeId], [WorkPic]
	FROM dbo.[Portfolio]
	WHERE PortfolioId = @PortfolioId

END
GO
PRINT N'Creating [dbo].[spPortfolio_InsertPortfolio]...';


GO
CREATE PROCEDURE [dbo].[spPortfolio_InsertPortfolio]
	@EmployeeId INT,
	@WorkPic BINARY,
	@PortfolioId INT output

AS

BEGIN

	SET NOCOUNT ON;

	INSERT INTO dbo.[Portfolio]([EmployeeId], [WorkPic])
	VALUES (@EmployeeId, @WorkPic);

	SET @PortfolioId = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[spPortfolio_UpdatePortfolio]...';


GO
CREATE PROCEDURE [dbo].[spPortfolio_UpdatePortfolio]
	@PortfolioId INT,
	@EmployeeId INT,
	@WorkPic BINARY

AS

BEGIN

	SET NOCOUNT ON;

	UPDATE dbo.[Portfolio]
		SET [EmployeeId] = @EmployeeId,
			[WorkPic] = @WorkPic
		WHERE [PortfolioId] = @PortfolioId

END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
IF NOT EXISTS (SELECT * FROM dbo.Business)
BEGIN
    INSERT INTO dbo.[Business]([Location], [OpenHours], [CloseHours])
	VALUES 
    ('Gretna Nebraska', 8, 17),
    ('Lincoln Nebraska', 8, 17),
    ('Omaha Nebraska', 8, 17),
    ('Oors Nebraska', 8, 17)
END;

IF NOT EXISTS (SELECT * FROM dbo.Employee)
BEGIN
    INSERT INTO dbo.[Employee]([FirstName], [LastName], [Age], [BusinessId])
	VALUES
    ('John', 'Smith', 22, 1),
    ('Greg', 'Mcarthy', 25, 2),
    ('Hunter', 'Popo', 27, 3),
    ('Jim', 'Slim', 30, 4)
END;

IF NOT EXISTS (SELECT * FROM dbo.Portfolio)
BEGIN
    INSERT INTO dbo.[Portfolio]([EmployeeId], [WorkPic])
	VALUES
    (1, 0010),
    (2, 0010),
    (3, 1100),
    (4, 1100)
END;
GO

GO
PRINT N'Update complete.';


GO
