/*
Deployment script for MowingServiceDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MowingServiceDB"
:setvar DefaultFilePrefix "MowingServiceDB"
:setvar DefaultDataPath "C:\Users\saing\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\saing\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The type for column CloseHours in table [dbo].[Business] is currently  TIME (7) NOT NULL but is being changed to  INT NOT NULL. There is no implicit or explicit conversion.

The type for column OpenHours in table [dbo].[Business] is currently  TIME (7) NOT NULL but is being changed to  INT NOT NULL. There is no implicit or explicit conversion.
*/

IF EXISTS (select top 1 1 from [dbo].[Business])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping [dbo].[FK_Employee_Business]...';


GO
ALTER TABLE [dbo].[Employee] DROP CONSTRAINT [FK_Employee_Business];


GO
PRINT N'Starting rebuilding table [dbo].[Business]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Business] (
    [BusinessId] INT          IDENTITY (1, 1) NOT NULL,
    [Location]   VARCHAR (50) NOT NULL,
    [OpenHours]  INT          NOT NULL,
    [CloseHours] INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([BusinessId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Business])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Business] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Business] ([BusinessId], [Location], [OpenHours], [CloseHours])
        SELECT   [BusinessId],
                 [Location],
                 [OpenHours],
                 [CloseHours]
        FROM     [dbo].[Business]
        ORDER BY [BusinessId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Business] OFF;
    END

DROP TABLE [dbo].[Business];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Business]', N'Business';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[FK_Employee_Business]...';


GO
ALTER TABLE [dbo].[Employee] WITH NOCHECK
    ADD CONSTRAINT [FK_Employee_Business] FOREIGN KEY ([BusinessId]) REFERENCES [dbo].[Business] ([BusinessId]);


GO
PRINT N'Refreshing [dbo].[spBusiness_DeleteByBusinessId]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spBusiness_DeleteByBusinessId]';


GO
PRINT N'Refreshing [dbo].[spBusiness_GetBusinessAll]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spBusiness_GetBusinessAll]';


GO
PRINT N'Refreshing [dbo].[spBusiness_GetBusinessByBusinessId]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spBusiness_GetBusinessByBusinessId]';


GO
PRINT N'Refreshing [dbo].[spBusiness_InsertBusiness]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spBusiness_InsertBusiness]';


GO
PRINT N'Refreshing [dbo].[spBusiness_UpdateBusiness]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spBusiness_UpdateBusiness]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
IF NOT EXISTS (SELECT * FROM dbo.Business)
BEGIN
    INSERT INTO dbo.[Business]([Location], [OpenHours], [CloseHours])
	VALUES 
    ('Gretna Nebraska', 8, 17),
    ('Lincoln Nebraska', 8, 17),
    ('Omaha Nebraska', 8, 17),
    ('Oors Nebraska', 8, 17)
END;

IF NOT EXISTS (SELECT * FROM dbo.Employee)
BEGIN
    INSERT INTO dbo.[Employee]([FirstName], [LastName], [Age], [BusinessId])
	VALUES
    ('John', 'Smith', 22, 1),
    ('Greg', 'Mcarthy', 25, 2),
    ('Hunter', 'Popo', 27, 3),
    ('Jim', 'Slim', 30, 4)
END;

IF NOT EXISTS (SELECT * FROM dbo.Portfolio)
BEGIN
    INSERT INTO dbo.[Portfolio]([EmployeeId], [WorkPic])
	VALUES
    (1, 0010),
    (2, 0010),
    (3, 1100),
    (4, 1100)
END;
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Employee] WITH CHECK CHECK CONSTRAINT [FK_Employee_Business];


GO
PRINT N'Update complete.';


GO
