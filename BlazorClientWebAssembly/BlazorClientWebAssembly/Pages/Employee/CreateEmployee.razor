@page "/Employee/CreateEmployee"
@using System.ComponentModel.Design
@using System.Runtime.CompilerServices
@inject HttpClient Http
@inject NavigationManager navigationManager

<h3>Add Employee</h3>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else
{
    <EditForm Model="@employee" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary Model="@employee"></ValidationSummary>
        <div class="form-group">
            <label>First Name</label>
            <InputText @bind-Value="employee.FirstName" class="form-control"></InputText>
            <ValidationMessage For="@(() => employee.FirstName)" class="text-danger" />
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <InputText @bind-Value="employee.LastName" class="form-control"></InputText>
            <ValidationMessage For="@(() => employee.LastName)" class="text-danger" />
        </div>
        <div class="form-group">
            <label>Age</label>
            <InputNumber @bind-Value="employee.Age" class="form-control"></InputNumber>
            <ValidationMessage For="@(() => employee.Age)" class="text-danger" />
        </div>

        <div class="form-group">
            <label>Employee Location</label>
            
                <select @onchange="EmployeeLocationChange" class="form-control">
                    <option value="">select a location</option>

                    @foreach (var business in businessInfo)
                    {
                        <option value="@business.BusinessId">@business.Location</option>
                    }

                </select>
            
        </div>
        <div class="form-group">
            <input type="submit" value="Add New Employee" class="btn btn-primary" />
        </div>
    </EditForm>

}

@code {
    private EmployeeModel employee = new EmployeeModel();
    // private List<BusinessModel> businessItems = new List<BusinessModel>();
    private string errorString;

    //protected override async Task OnParametersSetAsync()
    //{
    //    HttpResponseMessage response = await Http.GetAsync("api/business");

    //    if (response.IsSuccessStatusCode)
    //    {
    //        foodItems = await response.Content.ReadFromJsonAsync<List<FoodModel>>();
    //    }
    //    else
    //    {
    //        errorString = response.ReasonPhrase;
    //    }
    //}

    private void EmployeeLocationChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            employee.BusinessId = int.Parse(e.Value.ToString());
        }
    }

    public static List<BusinessModel> businessInfo = new List<BusinessModel>();


    private bool confirmdelete = false;

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await Http.GetAsync($"api/business");

        if (response.IsSuccessStatusCode)
        {
            businessInfo = await response.Content.ReadFromJsonAsync<List<BusinessModel>>();
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }


    private async Task HandleValidSubmit()
    {
        //order.Total = order.Quantity * foodItems.First(x => x.FoodId == order.FoodId).Price;

        try
        {
            var response = await Http.PostAsJsonAsync("api/employee", employee);
            var contents = await response.Content.ReadFromJsonAsync<EmployeeCreateResultsModel>();

            navigationManager.NavigateTo($"employee/DisplayEmployee/{contents.EmployeeId}");
        }
        catch (Exception ex)
        {
            errorString = ex.Message;
        }
    }
}
