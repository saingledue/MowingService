@page "/Employee/DisplayEmployeeAll"
@using System.ComponentModel.Design
@using System.Runtime.CompilerServices
@inject HttpClient Http
@inject NavigationManager navigationManager


<h3>DisplayBusinessAll</h3>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else
{

    <table class="table table-striped" style="margin-top: 25px">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Age</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employeeInfo)
            {
                foreach (var business in businessInfo)
                {
                    @if (employee.BusinessId == business.BusinessId)
                    {
                        <tr>
                            <td>@employee.FirstName</td>
                            <td>@employee.LastName</td>
                            <td>@employee.Age</td>

                            <td>@business.Location</td>
                            
                            <td colspan="2">

                                <button class="btn btn-danger" @onclick="@(b => HandleDeleteRecord(employee.EmployeeId))">
                                    Delete
                                </button>



                                @*@if (confirmDelete)
                            {
                                <button class="btn btn-outline-danger" @onclick="HandleDeleteRecord">
                                    Confirm Delete
                                </button>

                                <button class="btn btn-secondary" @onclick="(() => confirmDelete = false)">
                                    Cancel
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-danger" @onclick="(() => confirmDelete = true)">
                                    Delete Order
                                </button>
                            }*@
                            </td>
                        </tr>
                        }
                    }

                }
            </tbody>
    </table>


    <!--<EditForm Model="@updateModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary Model="@updateModel" />-->

    @*<div class="form-group">
            <label>Name for the Order</label>
            <InputText @bind-Value="updateModel.OrderName" class="form-control"></InputText>
            <ValidationMessage For="@(() => updateModel.OrderName)" class="text-danger" />
        </div>*@

    <!--<div class="form-group">
            <input type="submit" value="Sumbit Listing" class="btn btn-primary" />
        </div>
    </EditForm>-->
}

@code {

    public List<EmployeeModel> employeeInfo = new List<EmployeeModel>();

    public List<BusinessModel> businessInfo = new List<BusinessModel>();

    //public string Location = businessInfo[].Location;

    private string errorString;
    //private bool confirmDelete = false;

    

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await Http.GetAsync($"api/employee");

        if (response.IsSuccessStatusCode)
        {
            employeeInfo = await response.Content.ReadFromJsonAsync<List<EmployeeModel>>();
        }
        else
        {
            errorString = response.ReasonPhrase;
        }

        HttpResponseMessage businessResponse = await Http.GetAsync($"api/business/");

        if (businessResponse.IsSuccessStatusCode)
        {
            businessInfo = await businessResponse.Content.ReadFromJsonAsync<List<BusinessModel>>();
        }
        else
        {
            errorString = businessResponse.ReasonPhrase;
        }
    }

    //private async Task HandleValidSubmit()
    //{
    //    try
    //    {
    //        HttpResponseMessage response = await Http.PutAsJsonAsync("api/business", updateModel);
    //    }
    //    catch (Exception ex)
    //    {
    //        errorString = ex.Message;
    //    }
    //}

    private async Task HandleDeleteRecord(int employeeId)
    {
        HttpResponseMessage response = await Http.DeleteAsync($"api/employee/{employeeId}");

        if (response.IsSuccessStatusCode)
        {
            await OnInitializedAsync();
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }
}